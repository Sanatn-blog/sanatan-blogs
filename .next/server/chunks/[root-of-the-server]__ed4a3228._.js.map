{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\ninterface GlobalWithMongoose {\r\n  mongoose: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\ndeclare const global: GlobalWithMongoose;\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAgBA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\nimport bcryptjs from 'bcryptjs';\r\n\r\nexport interface IUser extends Document {\r\n  _id: string;\r\n  name: string;\r\n  email?: string;\r\n  password?: string;\r\n  phoneNumber?: string;\r\n  avatar?: string;\r\n  role: 'user' | 'admin' | 'super_admin';\r\n  status: 'pending' | 'approved' | 'rejected' | 'suspended';\r\n  bio?: string;\r\n  socialLinks?: {\r\n    twitter?: string;\r\n    linkedin?: string;\r\n    website?: string;\r\n  };\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  lastLogin?: Date;\r\n  emailVerified: boolean;\r\n  emailVerificationToken?: string;\r\n  resetPasswordToken?: string;\r\n  resetPasswordExpires?: Date;\r\n  isVerified?: boolean;\r\n  verifiedAt?: Date;\r\n  isActive?: boolean;\r\n  isTemporary?: boolean;\r\n  otp?: string;\r\n  otpExpiry?: Date;\r\n  googleId?: string;\r\n  facebookId?: string;\r\n  instagramId?: string;\r\n  twitterId?: string;\r\n  authProvider?: 'email' | 'phone' | 'google' | 'facebook' | 'instagram' | 'twitter';\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Name is required'],\r\n    trim: true,\r\n    minLength: [2, 'Name must be at least 2 characters'],\r\n    maxLength: [50, 'Name cannot exceed 50 characters']\r\n  },\r\n  email: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email']\r\n  },\r\n  phoneNumber: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    trim: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    minLength: [6, 'Password must be at least 6 characters'],\r\n    select: false // Don't include password in queries by default\r\n  },\r\n  avatar: {\r\n    type: String,\r\n    default: null\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'admin', 'super_admin'],\r\n    default: 'user'\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: ['pending', 'approved', 'rejected', 'suspended'],\r\n    default: 'pending'\r\n  },\r\n  bio: {\r\n    type: String,\r\n    maxLength: [500, 'Bio cannot exceed 500 characters']\r\n  },\r\n  socialLinks: {\r\n    twitter: String,\r\n    linkedin: String,\r\n    website: String\r\n  },\r\n  lastLogin: Date,\r\n  emailVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  emailVerificationToken: String,\r\n  resetPasswordToken: String,\r\n  resetPasswordExpires: Date,\r\n  isVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  verifiedAt: Date,\r\n  isActive: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isTemporary: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  otp: String,\r\n  otpExpiry: Date,\r\n  googleId: String,\r\n  facebookId: String,\r\n  instagramId: String,\r\n  twitterId: String,\r\n  authProvider: {\r\n    type: String,\r\n    enum: ['email', 'phone', 'google', 'facebook', 'instagram', 'twitter'],\r\n    default: 'email'\r\n  }\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\n// Index for better query performance\r\nUserSchema.index({ status: 1 });\r\nUserSchema.index({ role: 1 });\r\n\r\n// Hash password before saving\r\nUserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password') || !this.password) return next();\r\n  \r\n  try {\r\n    const salt = await bcryptjs.genSalt(12);\r\n    this.password = await bcryptjs.hash(this.password, salt);\r\n    next();\r\n  } catch (error) {\r\n    next(error as Error);\r\n  }\r\n});\r\n\r\n// Compare password method\r\nUserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\r\n  return bcryptjs.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Remove password from JSON output\r\nUserSchema.methods.toJSON = function() {\r\n  const userObject = this.toObject();\r\n  delete userObject.password;\r\n  delete userObject.emailVerificationToken;\r\n  delete userObject.resetPasswordToken;\r\n  delete userObject.resetPasswordExpires;\r\n  return userObject;\r\n};\r\n\r\nconst User = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n\r\nexport default User; "],"names":[],"mappings":";;;AAAA;AACA;;;AAsCA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAmB;QACpC,MAAM;QACN,WAAW;YAAC;YAAG;SAAqC;QACpD,WAAW;YAAC;YAAI;SAAmC;IACrD;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,WAAW;QACX,MAAM;QACN,OAAO;YAAC;YAA+C;SAA6B;IACtF;IACA,aAAa;QACX,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,WAAW;YAAC;YAAG;SAAyC;QACxD,QAAQ,MAAM,+CAA+C;IAC/D;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;YAAS;SAAc;QACtC,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAW;YAAY;YAAY;SAAY;QACtD,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,WAAW;YAAC;YAAK;SAAmC;IACtD;IACA,aAAa;QACX,SAAS;QACT,UAAU;QACV,SAAS;IACX;IACA,WAAW;IACX,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,wBAAwB;IACxB,oBAAoB;IACpB,sBAAsB;IACtB,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,YAAY;IACZ,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,KAAK;IACL,WAAW;IACX,UAAU;IACV,YAAY;IACZ,aAAa;IACb,WAAW;IACX,cAAc;QACZ,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;YAAU;YAAY;YAAa;SAAU;QACtE,SAAS;IACX;AACF,GAAG;IACD,YAAY;AACd;AAEA,qCAAqC;AACrC,WAAW,KAAK,CAAC;IAAE,QAAQ;AAAE;AAC7B,WAAW,KAAK,CAAC;IAAE,MAAM;AAAE;AAE3B,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAe,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;IAE3D,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACnD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,0BAA0B;AAC1B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAe,iBAAyB;IAC3E,OAAO,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;AAC1D;AAEA,mCAAmC;AACnC,WAAW,OAAO,CAAC,MAAM,GAAG;IAC1B,MAAM,aAAa,IAAI,CAAC,QAAQ;IAChC,OAAO,WAAW,QAAQ;IAC1B,OAAO,WAAW,sBAAsB;IACxC,OAAO,WAAW,kBAAkB;IACpC,OAAO,WAAW,oBAAoB;IACtC,OAAO;AACT;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAEpD","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/lib/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET!;\r\n\r\nif (!JWT_SECRET) {\r\n  throw new Error('Please define the JWT_SECRET environment variable');\r\n}\r\n\r\nexport interface JWTPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: string;\r\n  status: string;\r\n}\r\n\r\nexport function generateToken(payload: JWTPayload): string {\r\n  return jwt.sign(payload, JWT_SECRET, {\r\n    expiresIn: '7d',\r\n    issuer: 'sanatan-blogs',\r\n    audience: 'sanatan-blogs-users'\r\n  });\r\n}\r\n\r\nexport function verifyToken(token: string): JWTPayload | null {\r\n  try {\r\n    const decoded = jwt.verify(token, JWT_SECRET, {\r\n      issuer: 'sanatan-blogs',\r\n      audience: 'sanatan-blogs-users'\r\n    }) as JWTPayload;\r\n    \r\n    return decoded;\r\n  } catch (error) {\r\n    console.error('JWT verification failed:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function generateRefreshToken(payload: JWTPayload): string {\r\n  return jwt.sign(payload, JWT_SECRET, {\r\n    expiresIn: '30d',\r\n    issuer: 'sanatan-blogs',\r\n    audience: 'sanatan-blogs-refresh'\r\n  });\r\n}\r\n\r\nexport function verifyRefreshToken(token: string): JWTPayload | null {\r\n  try {\r\n    const decoded = jwt.verify(token, JWT_SECRET, {\r\n      issuer: 'sanatan-blogs',\r\n      audience: 'sanatan-blogs-refresh'\r\n    }) as JWTPayload;\r\n    \r\n    return decoded;\r\n  } catch (error) {\r\n    console.error('Refresh token verification failed:', error);\r\n    return null;\r\n  }\r\n} "],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AASO,SAAS,cAAc,OAAmB;IAC/C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QACnC,WAAW;QACX,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,YAAY;YAC5C,QAAQ;YACR,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;IACT;AACF;AAEO,SAAS,qBAAqB,OAAmB;IACtD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QACnC,WAAW;QACX,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,SAAS,mBAAmB,KAAa;IAC9C,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,YAAY;YAC5C,QAAQ;YACR,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/middleware/auth.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { verifyToken, JWTPayload } from '@/lib/jwt';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/User';\r\n\r\nexport interface AuthenticatedRequest extends NextRequest {\r\n  user?: JWTPayload & {\r\n    _id: string;\r\n  };\r\n}\r\n\r\nexport async function authenticateUser(request: AuthenticatedRequest): Promise<{\r\n  success: boolean;\r\n  user?: JWTPayload & { _id: string };\r\n  error?: string;\r\n}> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    \r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return { success: false, error: 'No token provided' };\r\n    }\r\n\r\n    const token = authHeader.substring(7);\r\n    const decoded = verifyToken(token);\r\n\r\n    if (!decoded) {\r\n      return { success: false, error: 'Invalid token' };\r\n    }\r\n\r\n    // Connect to database and verify user exists and is approved\r\n    await connectDB();\r\n    const user = await User.findById(decoded.userId);\r\n\r\n    if (!user) {\r\n      return { success: false, error: 'User not found' };\r\n    }\r\n\r\n    if (user.status !== 'approved') {\r\n      return { success: false, error: 'User not approved' };\r\n    }\r\n\r\n    const userWithId = {\r\n      ...decoded,\r\n      _id: user._id.toString()\r\n    };\r\n\r\n    return { success: true, user: userWithId };\r\n  } catch (error) {\r\n    console.error('Authentication error:', error);\r\n    return { success: false, error: 'Authentication failed' };\r\n  }\r\n}\r\n\r\nexport function requireAuth(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return async (request: AuthenticatedRequest) => {\r\n    const authResult = await authenticateUser(request);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    request.user = authResult.user;\r\n    return handler(request);\r\n  };\r\n}\r\n\r\nexport function requireRole(roles: string[]) {\r\n  return function (handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n    return async (request: AuthenticatedRequest) => {\r\n      const authResult = await authenticateUser(request);\r\n      \r\n      if (!authResult.success) {\r\n        return NextResponse.json(\r\n          { error: authResult.error },\r\n          { status: 401 }\r\n        );\r\n      }\r\n\r\n      if (!roles.includes(authResult.user!.role)) {\r\n        return NextResponse.json(\r\n          { error: 'Insufficient permissions' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n\r\n      request.user = authResult.user;\r\n      return handler(request);\r\n    };\r\n  };\r\n}\r\n\r\nexport function requireAdmin(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return requireRole(['admin', 'super_admin'])(handler);\r\n}\r\n\r\nexport function requireSuperAdmin(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return requireRole(['super_admin'])(handler);\r\n}\r\n\r\n// Utility function to check if user is approved\r\nexport async function isUserApproved(userId: string): Promise<boolean> {\r\n  try {\r\n    await connectDB();\r\n    const user = await User.findById(userId);\r\n    return user?.status === 'approved';\r\n  } catch (error) {\r\n    console.error('Error checking user approval:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Rate limiting helper (basic implementation)\r\nconst rateLimitMap = new Map();\r\n\r\nexport function rateLimit(maxRequests: number = 100, windowMs: number = 15 * 60 * 1000) {\r\n  return function (handler: (req: NextRequest) => Promise<NextResponse>) {\r\n    return async (request: NextRequest) => {\r\n      const ip = request.headers.get('x-forwarded-for') || \r\n                request.headers.get('x-real-ip') || \r\n                request.headers.get('x-client-ip') || \r\n                'unknown';\r\n      const now = Date.now();\r\n      const windowStart = now - windowMs;\r\n\r\n      if (!rateLimitMap.has(ip)) {\r\n        rateLimitMap.set(ip, []);\r\n      }\r\n\r\n      const requests = rateLimitMap.get(ip);\r\n      const validRequests = requests.filter((time: number) => time > windowStart);\r\n      \r\n      if (validRequests.length >= maxRequests) {\r\n        return NextResponse.json(\r\n          { error: 'Too many requests' },\r\n          { status: 429 }\r\n        );\r\n      }\r\n\r\n      validRequests.push(now);\r\n      rateLimitMap.set(ip, validRequests);\r\n\r\n      return handler(request);\r\n    };\r\n  };\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/app/api/auth/me/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/User';\r\nimport { requireAuth, AuthenticatedRequest } from '@/middleware/auth';\r\n\r\nasync function getCurrentUserHandler(request: AuthenticatedRequest) {\r\n  try {\r\n    await connectDB();\r\n\r\n    // Get user from database to ensure latest data\r\n    const user = await User.findById(request.user?._id);\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'User not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Return user without sensitive information\r\n    const userResponse = {\r\n      _id: user._id,\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role,\r\n      status: user.status,\r\n      avatar: user.avatar,\r\n      bio: user.bio,\r\n      socialLinks: user.socialLinks,\r\n      lastLogin: user.lastLogin,\r\n      createdAt: user.createdAt\r\n    };\r\n\r\n    return NextResponse.json({\r\n      user: userResponse\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Get current user error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to get user information' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport const GET = requireAuth(getCurrentUserHandler); "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,eAAe,sBAAsB,OAA6B;IAChE,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QAEd,+CAA+C;QAC/C,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE;QAE/C,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,4CAA4C;QAC5C,MAAM,eAAe;YACnB,KAAK,KAAK,GAAG;YACb,MAAM,KAAK,IAAI;YACf,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI;YACf,QAAQ,KAAK,MAAM;YACnB,QAAQ,KAAK,MAAM;YACnB,KAAK,KAAK,GAAG;YACb,aAAa,KAAK,WAAW;YAC7B,WAAW,KAAK,SAAS;YACzB,WAAW,KAAK,SAAS;QAC3B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,MAAM,MAAM,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE","debugId":null}}]
}