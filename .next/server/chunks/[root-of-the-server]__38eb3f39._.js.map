{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\ninterface GlobalWithMongoose {\r\n  mongoose: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\ndeclare const global: GlobalWithMongoose;\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAgBA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/models/Blog.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface IBlog extends Document {\r\n  _id: string;\r\n  title: string;\r\n  slug: string;\r\n  excerpt: string;\r\n  content: string;\r\n  featuredImage?: string;\r\n  author: mongoose.Types.ObjectId;\r\n  category: string;\r\n  tags: string[];\r\n  status: 'draft' | 'published' | 'archived';\r\n  isPublished: boolean;\r\n  publishedAt?: Date;\r\n  views: number;\r\n  likes: mongoose.Types.ObjectId[];\r\n  comments: mongoose.Types.ObjectId[];\r\n  seo: {\r\n    metaTitle?: string;\r\n    metaDescription?: string;\r\n    metaKeywords?: string[];\r\n  };\r\n  readingTime: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst BlogSchema = new Schema<IBlog>({\r\n  title: {\r\n    type: String,\r\n    required: [true, 'Title is required'],\r\n    trim: true,\r\n    minLength: [3, 'Title must be at least 3 characters'],\r\n    maxLength: [200, 'Title cannot exceed 200 characters']\r\n  },\r\n  slug: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: [/^[a-z0-9-]+$/, 'Slug can only contain lowercase letters, numbers, and hyphens']\r\n  },\r\n  excerpt: {\r\n    type: String,\r\n    required: [true, 'Excerpt is required'],\r\n    trim: true,\r\n    minLength: [10, 'Excerpt must be at least 10 characters'],\r\n    maxLength: [300, 'Excerpt cannot exceed 300 characters']\r\n  },\r\n  content: {\r\n    type: String,\r\n    required: [true, 'Content is required'],\r\n    minLength: [50, 'Content must be at least 50 characters']\r\n  },\r\n  featuredImage: {\r\n    type: String,\r\n    default: null\r\n  },\r\n  author: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'User',\r\n    required: [true, 'Author is required']\r\n  },\r\n  category: {\r\n    type: String,\r\n    required: [true, 'Category is required'],\r\n    trim: true,\r\n    enum: [\r\n      'Technology',\r\n      'Spirituality',\r\n      'Culture',\r\n      'Philosophy',\r\n      'Health',\r\n      'Education',\r\n      'Lifestyle',\r\n      'Art',\r\n      'Science',\r\n      'Politics',\r\n      'Environment',\r\n      'Other'\r\n    ]\r\n  },\r\n  tags: [{\r\n    type: String,\r\n    trim: true,\r\n    lowercase: true\r\n  }],\r\n  status: {\r\n    type: String,\r\n    enum: ['draft', 'published', 'archived'],\r\n    default: 'draft'\r\n  },\r\n  isPublished: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  publishedAt: {\r\n    type: Date\r\n  },\r\n  views: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  likes: [{\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'User'\r\n  }],\r\n  comments: [{\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'Comment'\r\n  }],\r\n  seo: {\r\n    metaTitle: {\r\n      type: String,\r\n      maxLength: [60, 'Meta title cannot exceed 60 characters']\r\n    },\r\n    metaDescription: {\r\n      type: String,\r\n      maxLength: [160, 'Meta description cannot exceed 160 characters']\r\n    },\r\n    metaKeywords: [{\r\n      type: String,\r\n      trim: true,\r\n      lowercase: true\r\n    }]\r\n  },\r\n  readingTime: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\n// Indexes for better query performance\r\nBlogSchema.index({ slug: 1 });\r\nBlogSchema.index({ author: 1 });\r\nBlogSchema.index({ status: 1 });\r\nBlogSchema.index({ isPublished: 1 });\r\nBlogSchema.index({ category: 1 });\r\nBlogSchema.index({ tags: 1 });\r\nBlogSchema.index({ publishedAt: -1 });\r\nBlogSchema.index({ views: -1 });\r\nBlogSchema.index({ createdAt: -1 });\r\n\r\n// Text search index\r\nBlogSchema.index({\r\n  title: 'text',\r\n  excerpt: 'text',\r\n  content: 'text',\r\n  tags: 'text'\r\n});\r\n\r\n// Calculate reading time before saving\r\nBlogSchema.pre('save', function(next) {\r\n  if (this.isModified('content')) {\r\n    const wordsPerMinute = 200;\r\n    const wordCount = this.content.split(/\\s+/).length;\r\n    this.readingTime = Math.ceil(wordCount / wordsPerMinute);\r\n  }\r\n  \r\n  // Set published date if status changes to published\r\n  if (this.isModified('status') && this.status === 'published' && !this.publishedAt) {\r\n    this.publishedAt = new Date();\r\n    this.isPublished = true;\r\n  }\r\n  \r\n  next();\r\n});\r\n\r\n// Generate slug from title\r\nBlogSchema.pre('save', function(next) {\r\n  if (this.isModified('title') && !this.slug) {\r\n    this.slug = this.title\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9 ]/g, '')\r\n      .replace(/\\s+/g, '-')\r\n      .substring(0, 100);\r\n  }\r\n  next();\r\n});\r\n\r\nconst Blog = mongoose.models.Blog || mongoose.model<IBlog>('Blog', BlogSchema);\r\n\r\nexport default Blog; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\nimport bcryptjs from 'bcryptjs';\r\n\r\nexport interface IUser extends Document {\r\n  _id: string;\r\n  name: string;\r\n  email?: string;\r\n  password?: string;\r\n  phoneNumber?: string;\r\n  avatar?: string;\r\n  role: 'user' | 'admin' | 'super_admin';\r\n  status: 'pending' | 'approved' | 'rejected' | 'suspended';\r\n  bio?: string;\r\n  socialLinks?: {\r\n    twitter?: string;\r\n    linkedin?: string;\r\n    website?: string;\r\n  };\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  lastLogin?: Date;\r\n  emailVerified: boolean;\r\n  emailVerificationToken?: string;\r\n  resetPasswordToken?: string;\r\n  resetPasswordExpires?: Date;\r\n  isVerified?: boolean;\r\n  verifiedAt?: Date;\r\n  isActive?: boolean;\r\n  isTemporary?: boolean;\r\n  otp?: string;\r\n  otpExpiry?: Date;\r\n  googleId?: string;\r\n  facebookId?: string;\r\n  instagramId?: string;\r\n  twitterId?: string;\r\n  authProvider?: 'email' | 'phone' | 'google' | 'facebook' | 'instagram' | 'twitter';\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Name is required'],\r\n    trim: true,\r\n    minLength: [2, 'Name must be at least 2 characters'],\r\n    maxLength: [50, 'Name cannot exceed 50 characters']\r\n  },\r\n  email: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email']\r\n  },\r\n  phoneNumber: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    trim: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    minLength: [6, 'Password must be at least 6 characters'],\r\n    select: false // Don't include password in queries by default\r\n  },\r\n  avatar: {\r\n    type: String,\r\n    default: null\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'admin', 'super_admin'],\r\n    default: 'user'\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: ['pending', 'approved', 'rejected', 'suspended'],\r\n    default: 'pending'\r\n  },\r\n  bio: {\r\n    type: String,\r\n    maxLength: [500, 'Bio cannot exceed 500 characters']\r\n  },\r\n  socialLinks: {\r\n    twitter: String,\r\n    linkedin: String,\r\n    website: String\r\n  },\r\n  lastLogin: Date,\r\n  emailVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  emailVerificationToken: String,\r\n  resetPasswordToken: String,\r\n  resetPasswordExpires: Date,\r\n  isVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  verifiedAt: Date,\r\n  isActive: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isTemporary: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  otp: String,\r\n  otpExpiry: Date,\r\n  googleId: String,\r\n  facebookId: String,\r\n  instagramId: String,\r\n  twitterId: String,\r\n  authProvider: {\r\n    type: String,\r\n    enum: ['email', 'phone', 'google', 'facebook', 'instagram', 'twitter'],\r\n    default: 'email'\r\n  }\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\n// Index for better query performance\r\nUserSchema.index({ status: 1 });\r\nUserSchema.index({ role: 1 });\r\n\r\n// Hash password before saving\r\nUserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password') || !this.password) return next();\r\n  \r\n  try {\r\n    const salt = await bcryptjs.genSalt(12);\r\n    this.password = await bcryptjs.hash(this.password, salt);\r\n    next();\r\n  } catch (error) {\r\n    next(error as Error);\r\n  }\r\n});\r\n\r\n// Compare password method\r\nUserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\r\n  return bcryptjs.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Remove password from JSON output\r\nUserSchema.methods.toJSON = function() {\r\n  const userObject = this.toObject();\r\n  delete userObject.password;\r\n  delete userObject.emailVerificationToken;\r\n  delete userObject.resetPasswordToken;\r\n  delete userObject.resetPasswordExpires;\r\n  return userObject;\r\n};\r\n\r\nconst User = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n\r\nexport default User; "],"names":[],"mappings":";;;AAAA;AACA;;;AAsCA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAmB;QACpC,MAAM;QACN,WAAW;YAAC;YAAG;SAAqC;QACpD,WAAW;YAAC;YAAI;SAAmC;IACrD;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,WAAW;QACX,MAAM;QACN,OAAO;YAAC;YAA+C;SAA6B;IACtF;IACA,aAAa;QACX,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,WAAW;YAAC;YAAG;SAAyC;QACxD,QAAQ,MAAM,+CAA+C;IAC/D;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;YAAS;SAAc;QACtC,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAW;YAAY;YAAY;SAAY;QACtD,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,WAAW;YAAC;YAAK;SAAmC;IACtD;IACA,aAAa;QACX,SAAS;QACT,UAAU;QACV,SAAS;IACX;IACA,WAAW;IACX,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,wBAAwB;IACxB,oBAAoB;IACpB,sBAAsB;IACtB,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,YAAY;IACZ,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,KAAK;IACL,WAAW;IACX,UAAU;IACV,YAAY;IACZ,aAAa;IACb,WAAW;IACX,cAAc;QACZ,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;YAAU;YAAY;YAAa;SAAU;QACtE,SAAS;IACX;AACF,GAAG;IACD,YAAY;AACd;AAEA,qCAAqC;AACrC,WAAW,KAAK,CAAC;IAAE,QAAQ;AAAE;AAC7B,WAAW,KAAK,CAAC;IAAE,MAAM;AAAE;AAE3B,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAe,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;IAE3D,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACnD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,0BAA0B;AAC1B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAe,iBAAyB;IAC3E,OAAO,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;AAC1D;AAEA,mCAAmC;AACnC,WAAW,OAAO,CAAC,MAAM,GAAG;IAC1B,MAAM,aAAa,IAAI,CAAC,QAAQ;IAChC,OAAO,WAAW,QAAQ;IAC1B,OAAO,WAAW,sBAAsB;IACxC,OAAO,WAAW,kBAAkB;IACpC,OAAO,WAAW,oBAAoB;IACtC,OAAO;AACT;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAEpD","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/lib/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET!;\r\n\r\nif (!JWT_SECRET) {\r\n  throw new Error('Please define the JWT_SECRET environment variable');\r\n}\r\n\r\nexport interface JWTPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: string;\r\n  status: string;\r\n}\r\n\r\nexport function generateToken(payload: JWTPayload): string {\r\n  return jwt.sign(payload, JWT_SECRET, {\r\n    expiresIn: '7d',\r\n    issuer: 'sanatan-blogs',\r\n    audience: 'sanatan-blogs-users'\r\n  });\r\n}\r\n\r\nexport function verifyToken(token: string): JWTPayload | null {\r\n  try {\r\n    const decoded = jwt.verify(token, JWT_SECRET, {\r\n      issuer: 'sanatan-blogs',\r\n      audience: 'sanatan-blogs-users'\r\n    }) as JWTPayload;\r\n    \r\n    return decoded;\r\n  } catch (error) {\r\n    console.error('JWT verification failed:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function generateRefreshToken(payload: JWTPayload): string {\r\n  return jwt.sign(payload, JWT_SECRET, {\r\n    expiresIn: '30d',\r\n    issuer: 'sanatan-blogs',\r\n    audience: 'sanatan-blogs-refresh'\r\n  });\r\n}\r\n\r\nexport function verifyRefreshToken(token: string): JWTPayload | null {\r\n  try {\r\n    const decoded = jwt.verify(token, JWT_SECRET, {\r\n      issuer: 'sanatan-blogs',\r\n      audience: 'sanatan-blogs-refresh'\r\n    }) as JWTPayload;\r\n    \r\n    return decoded;\r\n  } catch (error) {\r\n    console.error('Refresh token verification failed:', error);\r\n    return null;\r\n  }\r\n} "],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AASO,SAAS,cAAc,OAAmB;IAC/C,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QACnC,WAAW;QACX,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,YAAY;YAC5C,QAAQ;YACR,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;IACT;AACF;AAEO,SAAS,qBAAqB,OAAmB;IACtD,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QACnC,WAAW;QACX,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,SAAS,mBAAmB,KAAa;IAC9C,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,YAAY;YAC5C,QAAQ;YACR,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/middleware/auth.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { verifyToken, JWTPayload } from '@/lib/jwt';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/User';\r\n\r\nexport interface AuthenticatedRequest extends NextRequest {\r\n  user?: JWTPayload & {\r\n    _id: string;\r\n  };\r\n}\r\n\r\nexport async function authenticateUser(request: AuthenticatedRequest): Promise<{\r\n  success: boolean;\r\n  user?: JWTPayload & { _id: string };\r\n  error?: string;\r\n}> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    \r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return { success: false, error: 'No token provided' };\r\n    }\r\n\r\n    const token = authHeader.substring(7);\r\n    const decoded = verifyToken(token);\r\n\r\n    if (!decoded) {\r\n      return { success: false, error: 'Invalid token' };\r\n    }\r\n\r\n    // Connect to database and verify user exists and is approved\r\n    await connectDB();\r\n    const user = await User.findById(decoded.userId);\r\n\r\n    if (!user) {\r\n      return { success: false, error: 'User not found' };\r\n    }\r\n\r\n    if (user.status !== 'approved') {\r\n      return { success: false, error: 'User not approved' };\r\n    }\r\n\r\n    const userWithId = {\r\n      ...decoded,\r\n      _id: user._id.toString()\r\n    };\r\n\r\n    return { success: true, user: userWithId };\r\n  } catch (error) {\r\n    console.error('Authentication error:', error);\r\n    return { success: false, error: 'Authentication failed' };\r\n  }\r\n}\r\n\r\nexport function requireAuth(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return async (request: AuthenticatedRequest) => {\r\n    const authResult = await authenticateUser(request);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    request.user = authResult.user;\r\n    return handler(request);\r\n  };\r\n}\r\n\r\nexport function requireRole(roles: string[]) {\r\n  return function (handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n    return async (request: AuthenticatedRequest) => {\r\n      const authResult = await authenticateUser(request);\r\n      \r\n      if (!authResult.success) {\r\n        return NextResponse.json(\r\n          { error: authResult.error },\r\n          { status: 401 }\r\n        );\r\n      }\r\n\r\n      if (!roles.includes(authResult.user!.role)) {\r\n        return NextResponse.json(\r\n          { error: 'Insufficient permissions' },\r\n          { status: 403 }\r\n        );\r\n      }\r\n\r\n      request.user = authResult.user;\r\n      return handler(request);\r\n    };\r\n  };\r\n}\r\n\r\nexport function requireAdmin(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return requireRole(['admin', 'super_admin'])(handler);\r\n}\r\n\r\nexport function requireSuperAdmin(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\r\n  return requireRole(['super_admin'])(handler);\r\n}\r\n\r\n// Utility function to check if user is approved\r\nexport async function isUserApproved(userId: string): Promise<boolean> {\r\n  try {\r\n    await connectDB();\r\n    const user = await User.findById(userId);\r\n    return user?.status === 'approved';\r\n  } catch (error) {\r\n    console.error('Error checking user approval:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Rate limiting helper (basic implementation)\r\nconst rateLimitMap = new Map();\r\n\r\nexport function rateLimit(maxRequests: number = 100, windowMs: number = 15 * 60 * 1000) {\r\n  return function (handler: (req: NextRequest) => Promise<NextResponse>) {\r\n    return async (request: NextRequest) => {\r\n      const ip = request.headers.get('x-forwarded-for') || \r\n                request.headers.get('x-real-ip') || \r\n                request.headers.get('x-client-ip') || \r\n                'unknown';\r\n      const now = Date.now();\r\n      const windowStart = now - windowMs;\r\n\r\n      if (!rateLimitMap.has(ip)) {\r\n        rateLimitMap.set(ip, []);\r\n      }\r\n\r\n      const requests = rateLimitMap.get(ip);\r\n      const validRequests = requests.filter((time: number) => time > windowStart);\r\n      \r\n      if (validRequests.length >= maxRequests) {\r\n        return NextResponse.json(\r\n          { error: 'Too many requests' },\r\n          { status: 429 }\r\n        );\r\n      }\r\n\r\n      validRequests.push(now);\r\n      rateLimitMap.set(ip, validRequests);\r\n\r\n      return handler(request);\r\n    };\r\n  };\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/app/api/blogs/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport connectDB from '@/lib/mongodb';\r\nimport Blog from '@/models/Blog';\r\nimport User from '@/models/User';\r\nimport { requireAuth, AuthenticatedRequest } from '@/middleware/auth';\r\n\r\n// GET - List all published blogs with pagination and filtering (public endpoint)\r\nasync function getBlogsHandler(request: Request) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const category = searchParams.get('category');\r\n    const search = searchParams.get('search');\r\n    const author = searchParams.get('author');\r\n    const tag = searchParams.get('tag');\r\n    const status = searchParams.get('status'); // New parameter for admin panel\r\n\r\n    // Build query - allow all statuses if status parameter is provided (for admin)\r\n    const query: Record<string, unknown> = {};\r\n    \r\n    if (!status) {\r\n      // Public endpoint - only show published blogs\r\n      query.status = 'published';\r\n      query.isPublished = true;\r\n    } else if (status !== 'all') {\r\n      // Filter by specific status\r\n      query.status = status;\r\n    }\r\n\r\n    if (category) query.category = category;\r\n    if (author) query.author = author;\r\n    if (tag) query.tags = { $in: [tag] };\r\n    if (search) {\r\n      query.$text = { $search: search };\r\n    }\r\n\r\n    // Calculate pagination\r\n    const skip = (page - 1) * limit;\r\n\r\n    // Get blogs with author information\r\n    const blogs = await Blog.find(query)\r\n      .populate('author', 'name avatar bio')\r\n      .select('-content') // Exclude full content for list view\r\n      .sort({ publishedAt: -1, createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(limit)\r\n      .lean();\r\n\r\n    // Get total count for pagination\r\n    const totalBlogs = await Blog.countDocuments(query);\r\n    const totalPages = Math.ceil(totalBlogs / limit);\r\n\r\n    // Get categories for filtering\r\n    const categories = await Blog.distinct('category', query);\r\n\r\n    // Get popular tags\r\n    const tagStats = await Blog.aggregate([\r\n      { $match: query },\r\n      { $unwind: '$tags' },\r\n      { $group: { _id: '$tags', count: { $sum: 1 } } },\r\n      { $sort: { count: -1 } },\r\n      { $limit: 20 }\r\n    ]);\r\n\r\n    return NextResponse.json({\r\n      blogs,\r\n      pagination: {\r\n        currentPage: page,\r\n        totalPages,\r\n        totalBlogs,\r\n        hasNext: page < totalPages,\r\n        hasPrev: page > 1\r\n      },\r\n      categories,\r\n      popularTags: tagStats.map((tag) => ({\r\n        name: tag._id,\r\n        count: tag.count\r\n      }))\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Get blogs error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch blogs' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Create new blog (authenticated users only)\r\nasync function createBlogHandler(request: AuthenticatedRequest) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const body = await request.json();\r\n    const {\r\n      title,\r\n      excerpt,\r\n      content,\r\n      category,\r\n      tags,\r\n      featuredImage,\r\n      status = 'draft',\r\n      seo\r\n    } = body;\r\n\r\n    // Basic validation\r\n    if (!title || !excerpt || !content || !category) {\r\n      return NextResponse.json(\r\n        { error: 'Title, excerpt, content, and category are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify user exists and is approved\r\n    const user = await User.findById(request.user?._id);\r\n    if (!user || user.status !== 'approved') {\r\n      return NextResponse.json(\r\n        { error: 'User not found or not approved' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Generate slug from title\r\n    const baseSlug = title\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9 ]/g, '')\r\n      .replace(/\\s+/g, '-')\r\n      .substring(0, 100);\r\n\r\n    // Ensure slug is unique\r\n    let slug = baseSlug;\r\n    let counter = 1;\r\n    while (await Blog.findOne({ slug })) {\r\n      slug = `${baseSlug}-${counter}`;\r\n      counter++;\r\n    }\r\n\r\n    // Create new blog\r\n    const newBlog = new Blog({\r\n      title: title.trim(),\r\n      slug,\r\n      excerpt: excerpt.trim(),\r\n      content: content.trim(),\r\n      author: request.user?._id,\r\n      category,\r\n      tags: Array.isArray(tags) ? tags.map((tag: string) => tag.trim().toLowerCase()) : [],\r\n      featuredImage,\r\n      status,\r\n      seo: seo || {}\r\n    });\r\n\r\n    // If status is published, set publication date\r\n    if (status === 'published') {\r\n      newBlog.publishedAt = new Date();\r\n      newBlog.isPublished = true;\r\n    }\r\n\r\n    await newBlog.save();\r\n\r\n    // Populate author information for response\r\n    await newBlog.populate('author', 'name avatar bio email');\r\n\r\n    return NextResponse.json({\r\n      message: 'Blog created successfully',\r\n      blog: newBlog\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Create blog error:', error);\r\n\r\n    // Handle mongoose validation errors\r\n    if (error instanceof Error && error.name === 'ValidationError') {\r\n      return NextResponse.json(\r\n        { error: 'Validation failed', details: error.message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Failed to create blog' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Export handlers with appropriate middleware\r\nexport const GET = getBlogsHandler;\r\nexport const POST = requireAuth(createBlogHandler); "],"names":[],"mappings":"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","debugId":null}}]
}