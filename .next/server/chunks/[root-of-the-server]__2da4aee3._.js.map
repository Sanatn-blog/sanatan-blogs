{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\ninterface GlobalWithMongoose {\r\n  mongoose: {\r\n    conn: typeof mongoose | null;\r\n    promise: Promise<typeof mongoose> | null;\r\n  };\r\n}\r\n\r\ndeclare const global: GlobalWithMongoose;\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAgBA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\nimport bcryptjs from 'bcryptjs';\r\n\r\nexport interface IUser extends Document {\r\n  _id: string;\r\n  name: string;\r\n  email?: string;\r\n  password?: string;\r\n  phoneNumber?: string;\r\n  avatar?: string;\r\n  role: 'user' | 'admin' | 'super_admin';\r\n  status: 'pending' | 'approved' | 'rejected' | 'suspended';\r\n  bio?: string;\r\n  socialLinks?: {\r\n    twitter?: string;\r\n    linkedin?: string;\r\n    website?: string;\r\n  };\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  lastLogin?: Date;\r\n  emailVerified: boolean;\r\n  emailVerificationToken?: string;\r\n  resetPasswordToken?: string;\r\n  resetPasswordExpires?: Date;\r\n  isVerified?: boolean;\r\n  verifiedAt?: Date;\r\n  isActive?: boolean;\r\n  isTemporary?: boolean;\r\n  otp?: string;\r\n  otpExpiry?: Date;\r\n  googleId?: string;\r\n  facebookId?: string;\r\n  instagramId?: string;\r\n  twitterId?: string;\r\n  authProvider?: 'email' | 'phone' | 'google' | 'facebook' | 'instagram' | 'twitter';\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  name: {\r\n    type: String,\r\n    required: [true, 'Name is required'],\r\n    trim: true,\r\n    minLength: [2, 'Name must be at least 2 characters'],\r\n    maxLength: [50, 'Name cannot exceed 50 characters']\r\n  },\r\n  email: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    lowercase: true,\r\n    trim: true,\r\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email']\r\n  },\r\n  phoneNumber: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n    trim: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    minLength: [6, 'Password must be at least 6 characters'],\r\n    select: false // Don't include password in queries by default\r\n  },\r\n  avatar: {\r\n    type: String,\r\n    default: null\r\n  },\r\n  role: {\r\n    type: String,\r\n    enum: ['user', 'admin', 'super_admin'],\r\n    default: 'user'\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: ['pending', 'approved', 'rejected', 'suspended'],\r\n    default: 'pending'\r\n  },\r\n  bio: {\r\n    type: String,\r\n    maxLength: [500, 'Bio cannot exceed 500 characters']\r\n  },\r\n  socialLinks: {\r\n    twitter: String,\r\n    linkedin: String,\r\n    website: String\r\n  },\r\n  lastLogin: Date,\r\n  emailVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  emailVerificationToken: String,\r\n  resetPasswordToken: String,\r\n  resetPasswordExpires: Date,\r\n  isVerified: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  verifiedAt: Date,\r\n  isActive: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isTemporary: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  otp: String,\r\n  otpExpiry: Date,\r\n  googleId: String,\r\n  facebookId: String,\r\n  instagramId: String,\r\n  twitterId: String,\r\n  authProvider: {\r\n    type: String,\r\n    enum: ['email', 'phone', 'google', 'facebook', 'instagram', 'twitter'],\r\n    default: 'email'\r\n  }\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\n// Index for better query performance\r\nUserSchema.index({ status: 1 });\r\nUserSchema.index({ role: 1 });\r\n\r\n// Hash password before saving\r\nUserSchema.pre('save', async function(next) {\r\n  if (!this.isModified('password') || !this.password) return next();\r\n  \r\n  try {\r\n    const salt = await bcryptjs.genSalt(12);\r\n    this.password = await bcryptjs.hash(this.password, salt);\r\n    next();\r\n  } catch (error) {\r\n    next(error as Error);\r\n  }\r\n});\r\n\r\n// Compare password method\r\nUserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\r\n  return bcryptjs.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Remove password from JSON output\r\nUserSchema.methods.toJSON = function() {\r\n  const userObject = this.toObject();\r\n  delete userObject.password;\r\n  delete userObject.emailVerificationToken;\r\n  delete userObject.resetPasswordToken;\r\n  delete userObject.resetPasswordExpires;\r\n  return userObject;\r\n};\r\n\r\nconst User = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n\r\nexport default User; "],"names":[],"mappings":";;;AAAA;AACA;;;AAsCA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAmB;QACpC,MAAM;QACN,WAAW;YAAC;YAAG;SAAqC;QACpD,WAAW;YAAC;YAAI;SAAmC;IACrD;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,WAAW;QACX,MAAM;QACN,OAAO;YAAC;YAA+C;SAA6B;IACtF;IACA,aAAa;QACX,MAAM;QACN,QAAQ;QACR,QAAQ;QACR,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,WAAW;YAAC;YAAG;SAAyC;QACxD,QAAQ,MAAM,+CAA+C;IAC/D;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;YAAS;SAAc;QACtC,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAW;YAAY;YAAY;SAAY;QACtD,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,WAAW;YAAC;YAAK;SAAmC;IACtD;IACA,aAAa;QACX,SAAS;QACT,UAAU;QACV,SAAS;IACX;IACA,WAAW;IACX,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,wBAAwB;IACxB,oBAAoB;IACpB,sBAAsB;IACtB,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,YAAY;IACZ,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,KAAK;IACL,WAAW;IACX,UAAU;IACV,YAAY;IACZ,aAAa;IACb,WAAW;IACX,cAAc;QACZ,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;YAAU;YAAY;YAAa;SAAU;QACtE,SAAS;IACX;AACF,GAAG;IACD,YAAY;AACd;AAEA,qCAAqC;AACrC,WAAW,KAAK,CAAC;IAAE,QAAQ;AAAE;AAC7B,WAAW,KAAK,CAAC;IAAE,MAAM;AAAE;AAE3B,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAe,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;IAE3D,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACnD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,0BAA0B;AAC1B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAe,iBAAyB;IAC3E,OAAO,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;AAC1D;AAEA,mCAAmC;AACnC,WAAW,OAAO,CAAC,MAAM,GAAG;IAC1B,MAAM,aAAa,IAAI,CAAC,QAAQ;IAChC,OAAO,WAAW,QAAQ;IAC1B,OAAO,WAAW,sBAAsB;IACxC,OAAO,WAAW,kBAAkB;IACpC,OAAO,WAAW,oBAAoB;IACtC,OAAO;AACT;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAEpD","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///D:/active-projects/sanatan-blogs/app/api/auth/send-register-otp/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/User';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    await connectDB();\r\n    \r\n    const body = await request.json();\r\n    const { phoneNumber, name } = body;\r\n\r\n    if (!phoneNumber || !name) {\r\n      return NextResponse.json(\r\n        { message: 'Phone number and name are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if user already exists with this phone number\r\n    const existingUser = await User.findOne({ phoneNumber });\r\n    \r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { message: 'Account already exists with this phone number' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Generate 6-digit OTP\r\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\r\n    \r\n    // Create a temporary user record with OTP\r\n    const tempUser = new User({\r\n      name,\r\n      phoneNumber,\r\n      otp,\r\n      otpExpiry: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\r\n      isTemporary: true // Flag to identify temp registration records\r\n    });\r\n    \r\n    await tempUser.save();\r\n\r\n    // In production, send SMS using service like Twilio\r\n    console.log(`Registration OTP for ${phoneNumber}: ${otp}`);\r\n    \r\n    // For development, return success without sending actual SMS\r\n    return NextResponse.json(\r\n      { message: 'OTP sent successfully' },\r\n      { status: 200 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Send registration OTP error:', error);\r\n    return NextResponse.json(\r\n      { message: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG;QAE9B,IAAI,CAAC,eAAe,CAAC,MAAM;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAqC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,sDAAsD;QACtD,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAY;QAEtD,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAgD,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,MAAM,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QAEhE,0CAA0C;QAC1C,MAAM,WAAW,IAAI,gHAAA,CAAA,UAAI,CAAC;YACxB;YACA;YACA;YACA,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK;YAC3C,aAAa,KAAK,6CAA6C;QACjE;QAEA,MAAM,SAAS,IAAI;QAEnB,oDAAoD;QACpD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,YAAY,EAAE,EAAE,KAAK;QAEzD,6DAA6D;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}